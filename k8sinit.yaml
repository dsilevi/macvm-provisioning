---
# Bootstrap K8S cluster on macbook M1 virtual machines (executes preparation with k8shosts)
- name: Init Kubernetes with kubeadm 
  hosts: k8smasterInit
  vars_files:
    - "{{ passwd_file }}"
    - "{{ modules_list }}"
  tasks:
    - name: Ping host
      ansible.builtin.ping:

# ------------------------------ K8S installation ------------------------------
    - name: Install kubernetes Python library
      ansible.builtin.pip:
        name: kubernetes
        state: present

    - name: Check if Kubernetes was already installed
      stat:
        path: /var/log/kubeadm.out
      register: kubeadm_init

    - name: Upload helpers to K8S master
      copy:
        src: helpers
        dest: ~/
        force: true
        mode: "0755"
      when: not kubeadm_init.stat.exists

    - name: Init cluster with parameters
      debug:
        msg: kubeadm init --config=/root/helpers/confkubeadm.yaml
        #msg: kubeadm init --kubernetes-version="{{ kubernetesVersion }}" --pod-network-cidr="{{ pod_network_cidr }}" --service-cidr="{{ service_cidr }}" --apiserver-advertise-address="{{ ansible_default_ipv4.address }}" --service-dns-domain="{{ cluster_domain }}"
      when: not kubeadm_init.stat.exists

    - shell: 
        creates: /var/log/kubeadm.out
        cmd: "kubeadm init --config=/root/helpers/confkubeadm.yaml > /var/log/kubeadm.out 2>&1"
        #cmd: "kubeadm init --kubernetes-version={{ kubernetesVersion }} --pod-network-cidr={{ pod_network_cidr }} --service-cidr={{ service_cidr }} --apiserver-advertise-address={{ ansible_default_ipv4.address }} --service-dns-domain={{ cluster_domain }} > /var/log/kubeadm.out 2>&1"
      when: not kubeadm_init.stat.exists

    - name: Fetch kubeadm output (command and token to join nodes to cluster) to local storage
      fetch:
        src: /var/log/kubeadm.out
        dest: ./ansible/kubeadm_{{ ansible_hostname }}_{{ ansible_date_time.date }}_{{ ansible_date_time.time}}/
        flat: yes
      when: not kubeadm_init.stat.exists

    - name: mkdir kube local folder
      shell:
        creates: ~/.kube/config.yaml
        cmd: "mkdir ~/.kube"
      when: not kubeadm_init.stat.exists

    - name: copy admin.conf to config.yaml
      shell:
        creates: ~/.kube/config.yaml
        cmd: "cp /etc/kubernetes/admin.conf ~/.kube/config.yaml"
      when: not kubeadm_init.stat.exists

    - name: chmod r on config.yaml
      shell:
        cmd: "chmod 600 ~/.kube/config.yaml"
      when: not kubeadm_init.stat.exists

    - name: Check if KUBECONFIG already specified in environment
      shell:
        cmd: "if sh -c 'env | grep KUBECONFIG > /dev/null 2>&1' ; then echo EXIST; else echo NOT EXIST; fi"
      register: kubeconfig_exist

    - lineinfile:
        dest: ~/.bashrc
        line: "export KUBECONFIG=~/.kube/config.yaml"
        state: present
      when: kubeconfig_exist.stdout == "NOT EXIST"

    - debug:
        msg: "Kubernetes was succesfully installed on {{ ansible_hostname }} -------------------"
      when: not kubeadm_init.stat.exists

    - debug:
        msg: "Kubernetes was ALREADY installed on {{ ansible_hostname }} -------------------"
      when: kubeadm_init.stat.exists


# ------------------------------ HELM installation ------------------------------
    - name: Check if HELM already installed in the cluster
      stat:
        path: /usr/local/bin/helm
      register: helm_init

    - debug:
        msg: "------------- HELM ALREADY installed --------------"
      when: helm_init.stat.exists

    - name: timestamp
      shell:
        cmd: "date >> /var/log/helm.out"
      when: not helm_init.stat.exists

    - name: Download HELM binaries
      shell:
        creates: ~/helm-{{ helm_version }}-linux-arm64.tar.gz
        cmd: "curl -fsSLo /root/helm-{{ helm_version }}-linux-arm64.tar.gz https://get.helm.sh/helm-{{ helm_version }}-linux-arm64.tar.gz"
      when: not helm_init.stat.exists

    - name: Install HELM on master
      shell:
        cmd: "cd ~/ && tar -zxvf helm-{{ helm_version }}-linux-arm64.tar.gz && mv linux-arm64/helm /usr/local/bin/helm && helm version --kubeconfig=~/.kube/config.yaml >> /var/log/helm.out 2>&1"
      when: not helm_init.stat.exists

    - name: Check HELM installed
      stat:
        path: /usr/local/bin/helm
      register: helm_complete

    - debug:
        msg: "------------- HELM succesfully installed --------------"
      when: not helm_complete.stat.exists

## ------------------------------ CALICO installation ------------------------------
    - name: Check if CALICO already installed in the cluster
      stat:
        path: /var/log/calico.out
      register: calico_init

    - debug:
        msg: "------------- CALICO ALREADY installed --------------"
      when: calico_init.stat.exists

    - name: timestamp
      shell:
        cmd: "date > /var/log/calico.out"
      when: not calico_init.stat.exists

    - name: Upload calico helm-releases to K8S master
      copy:
        src: helm-releases
        dest: ~/
        force: true
      when: not calico_init.stat.exists

    - name: Add calico helm repositories
      shell:
        cmd: "helm repo add {{ item.name }} {{ item.url }} >> /var/log/calico.out 2>&1"
      loop: "{{ helmRepositories.calico }}"
      when: not calico_init.stat.exists

    - name: Install calico charts
      shell:
        chdir: ~/helm-releases/calico-system
        cmd: /bin/bash -c "~/helpers/helm-deploy.sh ~/.kube/config.yaml calico-system {{ item.name }} --set pod_network_cidr={{ pod_network_cidr }} >> /var/log/calico.out 2>&1"
      loop: "{{ calicoReleases }}"
      when: not calico_init.stat.exists

# ------------------------------ Additional tasks -------------------------
    - name: Get actual taints from master node
      kubernetes.core.k8s_info:
        kubeconfig: ~/.kube/config.yaml
        api_version: v1
        kind: Node
        name: "{{ inventory_hostname }}"
      register: node_info

    - name: Fetch taints excluding master label
      set_fact:
        taints: "{{ node_info.resources[0].spec.taints | selectattr('key', '!=', 'node-role.kubernetes.io/control-plane') | list }}"
      when: "'taints' in node_info.resources[0].spec"

    - debug:
        msg: "{{ taints }}"
      when: "'taints' in node_info.resources[0].spec"

    - name: Allow workloads to be scheduled on master
      kubernetes.core.k8s:
        kubeconfig: ~/.kube/config.yaml
        state: present
        definition:
          api_version: v1
          kind: Node
          metadata:
            name: "{{ inventory_hostname }}"
          spec:
            taints: "{{ taints }}"
      when: "'taints' in node_info.resources[0].spec"
